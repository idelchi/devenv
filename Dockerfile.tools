#[=======================================================================[
# Description : Docker image containing various experimental tooling
#]=======================================================================]

FROM debian:bookworm

LABEL maintainer=arash.idelchi

USER root

ARG DEBIAN_FRONTEND=noninteractive

# Basic good practices
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Basic tooling
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    build-essential \
    clang \
    # Auxiliaries
    curl \
    wget \
    git \
    ca-certificates \
    sudo \
    # Tools
    graphviz \
    iputils-ping \
    gettext-base \
    moreutils \
    tree \
    file \
    # Editors
    ne \
    nano \
    vim \
    neovim \
    # ssh
    openssh-client \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Java & Node
RUN apt-get update && apt-get install -y --no-install-recommends \
    default-jdk \
    nodejs \
    npm \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-venv \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Pip override to allow breaking packages
RUN echo -e "[global]\nbreak-system-packages=true" >> /etc/pip.conf

# Powershell
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gnupg \
    apt-transport-https \
    && curl https://packages.microsoft.com/keys/microsoft.asc | gpg --yes --dearmor --output /usr/share/keyrings/microsoft.gpg && \
    sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/microsoft-debian-bullseye-prod bullseye main" > /etc/apt/sources.list.d/microsoft.list' && \
    apt-get update && apt-get install -y --no-install-recommends \
    powershell \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# .NET
RUN apt-get update && apt-get install -y --no-install-recommends \
    dotnet-runtime-7.0 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Ansible
RUN pip install --no-cache-dir ansible

# Terraform
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg \
    software-properties-common \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN wget -qO- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
    tee /etc/apt/sources.list.d/hashicorp.list
RUN apt-get update && apt-get install -y --no-install-recommends \
    terraform \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# kubectl, helm & minikube
RUN \
    # kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
    # helm
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash && \
    # minikube
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && \
    install minikube-linux-amd64 /usr/local/bin/minikube

# Various tools
RUN pip install --no-cache-dir \
    # (bind to 0.0.0.0 to allow access from outside)
    grip \
    gitlint \
    sphinx

# Install Task
ARG TASK_VERSION=v3.29.1
RUN wget -qO- https://github.com/go-task/task/releases/download/${TASK_VERSION}/task_linux_amd64.tar.gz | tar -xz -C /usr/local/bin

# Create CI User (Debian/Ubuntu)
ARG USER=user
RUN groupadd -r -g 1001 ${USER} && \
    useradd -r -u 1001 -g 1001 -m -c "${USER} account" -d /home/${USER} -s /bin/bash ${USER}

# Install Rust
ARG RUST_DIR=/opt/rust
RUN mkdir -p ${RUST_DIR} && chown -R ${USER}:${USER} ${RUST_DIR}

ENV RUSTUP_HOME=${RUST_DIR}/.rustup
ENV CARGO_HOME=${RUST_DIR}/.cargo
RUN wget -qO- https://sh.rustup.rs | bash -s -- -y
ENV PATH="${CARGO_HOME}/bin:${PATH}"

# Install Go
ARG GO_VERSION=go1.21.0.linux-amd64
RUN wget -qO- https://go.dev/dl/${GO_VERSION}.tar.gz | tar -xz -C /usr/local
ENV PATH="/usr/local/go/bin:$PATH"

ENV GOPATH=/opt/go
RUN mkdir ${GOPATH} && chown -R ${USER}:${USER} ${GOPATH}
ENV PATH="${GOPATH}/bin:$PATH"

USER ${USER}
WORKDIR /home/${USER}

# Run npm-groovy-lint once to download its preferred version of Java
RUN npm-groovy-lint --version

# Go tooling
# TODO: Move to logical groups instead (e.g. "linters", "formatters", etc.)
RUN echo \
    # Commands to install
    github.com/loov/goda@latest \
    github.com/lucasepe/yml2dot@latest \
    golang.org/x/tools/cmd/guru@latest \
    honnef.co/go/implements@latest \
    github.com/mikefarah/yq/v4@latest \
    github.com/bronze1man/yaml2json@latest \
    # Feed to 'go install'
    | xargs -n 1 go install

# Additional tools (subject to frequent change)
USER root
RUN cargo install \
    navi
# hadolint ignore=DL3059
RUN npm install -g dockly
RUN curl -sSf https://moncho.github.io/dry/dryup.sh | sh && \
    chmod 755 /usr/local/bin/dry
RUN curl -sSL https://get.docker.com/ | sh && \
    usermod -aG docker ${USER} && \
    adduser ${USER} sudo && \
    echo "${USER}  ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
RUN pip install --no-cache-dir \
    kube-shell
RUN curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | bash -
USER ${USER}
RUN echo \
    github.com/jesseduffield/lazydocker@latest \
    github.com/c-bata/kube-prompt@latest \
    github.com/amit-davidson/Chronos/cmd/chronos@latest \
    github.com/gulyasm/jsonui@latest \
    github.com/boyter/scc/v3@latest \
    github.com/derailed/k9s@latest \
    # Feed to 'go install'
    | xargs -n 1 go install

# Reroute cache to /tmp
ENV NPM_CONFIG_CACHE=/tmp/.npm
ENV XDG_CONFIG_HOME=/tmp/.config
ENV XDG_CACHE_HOME=/tmp/.cache
ENV MYPY_CACHE_DIR=/tmp/.mypy_cache
ENV RUFF_CACHE_DIR=/tmp/.ruff_cache
ENV TASK_TEMP_DIR=/tmp/.task

# Timezone
ENV TZ=Europe/Zurich
