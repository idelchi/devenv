name: docker

on:
  workflow_call:
    inputs:
      image:
        description: "Docker Image to build"
        default: ${{ github.repository }}
        required: false
        type: string
      platforms:
        description: "Platforms to build (comma separated)"
        default: linux/amd64,linux/arm64,linux/arm/v7
        required: false
        type: string
      project:
        description: "Project name"
        default: ${{ github.event.repository.name }}
        required: false
        type: string
      cache:
        description: "Cache location for the Docker image"
        default: ${{ github.repository_owner }}/cache
        required: false
        type: string
      username:
        description: "Docker Hub Username"
        default: ${{ github.repository_owner }}
        required: false
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        description: "Docker Hub Token"
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.targets.outputs.platforms }}
    steps:
      - id: targets
        run: |
          # Convert comma-separated string to JSON array
          PLATFORMS=$(echo -n '${{ inputs.platforms }}' | jq -R -s -c 'split(",")')
          echo "platforms=${PLATFORMS}" >> ${GITHUB_OUTPUT}

          echo "platforms: ${PLATFORMS}"

  build:
    runs-on: ubuntu-24.04
    needs: prepare
    strategy:
      fail-fast: true
      matrix:
        platform: ${{fromJson(needs.prepare.outputs.platforms)}}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}

          platform_pair=${platform//\//-}
          echo "PLATFORM_PAIR=${platform_pair}" >> ${GITHUB_ENV}

          arch=${platform#linux/}
          arch=${arch//\//-}
          echo "ARCH=${arch}" >> ${GITHUB_ENV}

          echo "platform: ${platform}"
          echo "PLATFORM_PAIR: ${platform_pair}"
          echo "ARCH: ${arch}"

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ inputs.image }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=registry,ref=${{ inputs.cache }}:${{  inputs.project }}-${{ env.ARCH }}
          cache-to: type=registry,ref=${{ inputs.cache }}:${{ inputs.project }}-${{ env.ARCH }},mode=max

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ inputs.image }}:latest \
            $(printf '${{ inputs.image }}@sha256:%s ' *)

      - name: Inspect image
        run: docker buildx imagetools inspect ${{ inputs.image }}:latest
