version: "3"

# requires
# - CONFIG_DIR
# - SCRIPTS_DIR
# - BUILD_DIR

shopt: [globstar]

tasks:
  yaml:
    desc: Lint YAML files
    summary: |
      This task lints YAML files using prettier and yamllint.
    cmds:
      - yamlfmt -lint -conf {{.CONFIG_YAMLFMT}} "**/*.{yaml,yml}"
      - prettier --config={{.CONFIG_PRETTIER}} --ignore-path={{.IGNORE}} --ignore-path={{.CONFIG_PRETTIER_IGNORE}} --check "**/*.yaml" "**/*.yml"
      - yamllint --config-file={{.CONFIG_YAMLLINT}} --strict .
    vars:
      CONFIG_PRETTIER: "{{.CONFIG_DIR}}/.prettierrc.yml"
      CONFIG_PRETTIER_IGNORE: "{{.CONFIG_DIR}}/.prettierignore"
      CONFIG_YAMLLINT: "{{.CONFIG_DIR}}/.yamllint.yml"
      CONFIG_YAMLFMT: "{{.CONFIG_DIR}}/.yamlfmt.yml"
      IGNORE: "{{.CONFIG_DIR}}/.ignore"
    sources:
      - ./**/*.yaml
      - ./**/*.yml
      - "{{.CONFIG_PRETTIER}}"
      - "{{.CONFIG_PRETTIER_IGNORE}}"
      - "{{.CONFIG_YAMLLINT}}"
      - "{{.CONFIG_YAMLFMT}}"
      - "{{.IGNORE}}"

  json:
    desc: Lint JSON files
    summary: |
      This task lints JSON files using prettier and jsonlint.
    cmds:
      - jsonlint --mode=cjson --quiet .
      - for: sources
        cmd: prettier --config={{.CONFIG}} --ignore-path={{.IGNORE}} --check "{{.ITEM}}"
    vars:
      CONFIG: "{{.CONFIG_DIR}}/.prettierrc.yml"
      IGNORE: "{{.CONFIG_DIR}}/.ignore"
    sources:
      - ./**/*.json
      - "{{.CONFIG}}"

  docker:
    desc: Lint Dockerfiles
    summary: |
      This task lints Dockerfiles using hadolint, dockerfilelint, and dockerfile-utils.
    cmd: |
      test -z "{{.FILES}}" && echo "no Dockerfiles found" && exit 0
      hadolint --config={{.CONFIG_HADOLINT}} {{.FILES}}
      dockerfile-utils lint {{.FILES}}
    vars:
      CONFIG_HADOLINT: "{{.CONFIG_DIR}}/.hadolint.yaml"
      FILES:
        sh: find . -type f -name "Dockerfile*" ! -name "*.dockerignore" | tr '\n' ' '
    sources:
      - ./**/Dockerfile*
      - "{{.CONFIG}}"
    preconditions:
      - sh: |
          for dockerfile in {{.FILES}}; do
            diff <(dockerfile-utils format --spaces 4 $dockerfile) <(cat $dockerfile) || exit 1
          done
        msg: "Dockerfiles have not been formatted with dockerfile-utils"

  md:
    desc: Lint Markdown files
    summary: |
      This task lints Markdown files using markdownlint and prettier.
    cmd: |
      test -z "{{.FILES}}" && echo "no markdown files found" && exit 0

      markdownlint --config={{.CONFIG_MARKDOWNLINT}} --ignore-path={{.IGNORE}} "**/*.md"
      prettier --config={{.CONFIG_PRETTIER}} --ignore-path={{.IGNORE}} --check "**/*.md"
    shopt: [globstar]
    vars:
      CONFIG_MARKDOWNLINT: "{{.CONFIG_DIR}}/.markdownlint.yaml"
      CONFIG_PRETTIER: "{{.CONFIG_DIR}}/.prettierrc.yml"
      IGNORE: "{{.CONFIG_DIR}}/.ignore"
      FILES:
        sh: find . -type f -name "*.md" | tr '\n' ' '
    sources:
      - ./**/*.md
      - "{{.IGNORE}}"

  shell:
    desc: Lint shell scripts
    summary: |
      This task lints shell scripts using shfmt and shellcheck.
    cmds:
      - for: sources
        cmd: shfmt -i 2 -ci -d -l -s {{.ITEM}}
      # TODO: Keep an eye out for when "https://github.com/go-task/task/issues/948" is implemented.
      # Since we want to lint all at once, maybe `for: sources` is not so suitable.
      - cmd: |
          test -z "{{.FILES}}" && echo "no shell files found" && exit 0
          shellcheck --enable=all --severity=style --source-path=SCRIPTDIR {{.FILES}}
    vars:
      FILES:
        sh: find . -type f -name "*.sh" | tr '\n' ' '
    sources:
      - ./**/*.sh

  spell:
    desc: Perform spell checking in the project files
    summary: |
      This task performs spell checking in the project files using misspell, cspell, codespell and typos.
      cspell is used mainly for code.
    cmds:
      - misspell -error {{.FILES}}
      - codespell --ignore-words={{.WORDLIST}} {{.FILES}}
      - |
        # Check if {{.TYPOS_CONFIG}} exists
        if [ -f "{{.TYPOS_CONFIG}}" ]; then
          typos --config {{.TYPOS_CONFIG}}
        else
          typos
        fi
      - |
        if [ -f "{{.CSPELL_CONFIG}}" ]; then
            config="{{.CSPELL_CONFIG}}"
        elif [ -f "{{.CONFIG}}" ]; then
            config="{{.CONFIG}}"
        fi

        if [ -n "$config" ]; then
            cspell lint --no-must-find-files --show-suggestions --config="${config}" --no-progress "**/*.go" "**/*.py" "**/*.sh"
        fi
    vars:
      CONFIG: "{{.CONFIG_DIR}}/cspell.yaml"
      WORDLIST: "{{.CONFIG_DIR}}/project-words"
      FILES:
        sh: >-
          find . -type f -name '*'
          | grep -v .build/
          | grep -v .git/
          | grep -v .cache/
          | grep -v .task/
          | grep -v mypy_cache/
          | tr '\n' ' '

  jenkins:
    desc: Lint Jenkinsfiles
    summary: |
      This task lints Jenkinsfiles using npm-groovy-lint and jflint.
    cmds:
      - npm-groovy-lint --config={{.CONFIG_DIR}}/ --failon info --no-insight --files "**/Jenkinsfile"
      - cmd: jflint --config={{.CONFIG}} {{.JENKINSFILE}} >> /dev/null
        ignore_error: true
    vars:
      CONFIG: "{{.CONFIG_DIR}}/.jflintrc"
      JENKINSFILE: '{{.CLI_ARGS | default "Jenkinsfile"}}'
    sources:
      - ./**/Jenkinsfile

  cp:
    desc: Detect copy-paste issues in the project files
    summary: |
      This task detects copy-paste issues in Go and Shell files using jscpd.
    cmd: jscpd --config={{.CONFIG}} .
    vars:
      CONFIG: "{{.CONFIG_DIR}}/.jscpd.json"
    generates:
      - ./.build/cpd/**/*

  ws:
    desc: Check for trailing whitespaces in the project files
    summary: |
      This task finds any trailing whitespaces in the project files and reports them.
    cmd: wslint -q -a -e "**/.build/**" "**"

  # ---------
  default:
    desc: Run all linting tasks in parallel
    deps:
      - task: ws
      - task: docker
      - task: yaml
      - task: json
      - task: shell
      - task: md
      - task: spell
      - task: cp
      - task: jenkins
