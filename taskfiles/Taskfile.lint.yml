version: '3'

vars:
  # Directories
  CONFIG_DIR: './config'
  SCRIPTS_DIR: './scripts'
  BUILD_DIR: '{{.BUILD_DIR | default ".build"}}'

tasks:
  ws:
    desc: Check for trailing whitespaces in the project files
    summary: |
      This task finds any trailing whitespaces in the project files and reports them.
    cmds:
      - wslint "**"

  docker:
    desc: Lint Dockerfiles
    summary: |
      This task lints Dockerfiles using hadolint, dockerfilelint, and dockerfile-utils.
    cmds:
      - |
        test -z "{{.DOCKERFILES}}" && echo "no Dockerfiles found" && exit 0
        hadolint --config={{.CONFIG}} {{.DOCKERFILES}}
        dockerfilelint {{.DOCKERFILES}}
        dockerfile-utils lint {{.DOCKERFILES}}
    vars:
      CONFIG: '{{.CONFIG_DIR}}/.hadolint.yaml'
      DOCKERFILES:
        sh: find . -name "Dockerfile" | tr '\n' ' '
    sources:
      - ./**/Dockerfile
      - '{{.CONFIG}}'
    preconditions:
      - sh: |
          for dockerfile in {{.DOCKERFILES}}; do
            diff <(dockerfile-utils format --spaces 4 $dockerfile) <(cat $dockerfile) || exit 1
          done
        msg: 'Dockerfiles have not been formatted with dockerfile-utils'

  json:
    desc: Lint JSON files
    summary: |
      This task lints JSON files using prettier and jsonlint.
    cmds:
      - prettier --config={{.CONFIG}} --ignore-path={{.IGNORE}} --check "**/*.json"
      - jsonlint --mode=cjson --quiet .
    vars:
      CONFIG: '{{.CONFIG_DIR}}/.prettierrc.yml'
      IGNORE: '{{.CONFIG_DIR}}/.ignore'
    sources:
      - ./**/*.json
      - '{{.CONFIG}}'
      - '{{.IGNORE}}'

  yaml:
    desc: Lint YAML files
    summary: |
      This task lints YAML files using prettier and yamllint.
    cmds:
      - prettier --config={{.CONFIG_PRETTIER}} --ignore-path={{.IGNORE}} --check "**/*.yaml" "**/*.yml"
      - yamllint --config-file={{.CONFIG_YAML}} --strict .
    vars:
      CONFIG_PRETTIER: '{{.CONFIG_DIR}}/.prettierrc.yml'
      CONFIG_YAML: '{{.CONFIG_DIR}}/.yamllint.yml'
      IGNORE: '{{.CONFIG_DIR}}/.ignore'
    sources:
      - ./**/*.yaml
      - ./**/*.yml
      - '{{.CONFIG_PRETTIER}}'
      - '{{.CONFIG_YAML}}'
      - '{{.IGNORE}}'

  md:
    desc: Lint Markdown files
    summary: |
      This task lints Markdown files using markdownlint and prettier.
    cmds:
      - |
        files=$(find . -name "*.md")
        test -z "$files" && echo "no markdown files found" && exit 0

        markdownlint --config={{.CONFIG_MARKDOWNLINT}} --ignore-path={{.IGNORE}} "**/*.md"
        prettier --config={{.CONFIG_PRETTIER}} --ignore-path={{.IGNORE}} --check "**/*.md"
    vars:
      CONFIG_MARKDOWNLINT: '{{.CONFIG_DIR}}/.markdownlint.yaml'
      CONFIG_PRETTIER: '{{.CONFIG_DIR}}/.prettierrc.yml'
      IGNORE: '{{.CONFIG_DIR}}/.ignore'
    sources:
      - ./**/*.md
      - '{{.IGNORE}}'

  shell:
    desc: Lint shell scripts
    summary: |
      This task lints shell scripts using shfmt and shellcheck.
    cmds:
      - shfmt -i 2 -ci -d -l -s {{.SCRIPTS_DIR}}/**/*.sh
      - shellcheck --shell=bash --enable=all --severity=style --source-path=SCRIPTDIR {{.SCRIPTS_DIR}}/**/*.sh
    sources:
      - ./{{.SCRIPTS_DIR}}/**/*.sh
    preconditions:
      - sh: shfmt -i 2 -ci -d -l -s {{.SCRIPTS_DIR}}/**/*.sh
        msg: 'shell/bash files have not been formatted with shfmt'

  spell:
    desc: Perform spell checking in the project files
    summary: |
      This task performs spell checking in the project files using misspell, cspell, codespell and typos.
      cspell is used mainly for code.
    cmds:
      - misspell -error {{.FILES}}
      - codespell --ignore-words={{.WORDLIST}} {{.FILES}}
      - typos
      - cspell lint --show-suggestions --config={{.CONFIG}} --no-progress "**/*.go" "**/*.py" "**/*.sh"
    vars:
      CONFIG: '{{.CONFIG_DIR}}/cspell.yaml'
      WORDLIST: '{{.CONFIG_DIR}}/project-words'
      FILES:
        sh: >-
          find . -type f -name '*'
          | grep -v .build/
          | grep -v .git/
          | grep -v .cache/
          | grep -v .task/
          | grep -v mypy_cache/
          | tr '\n' ' '

  cp:
    desc: Detect copy-paste issues in the project files
    summary: |
      This task detects copy-paste issues in Go and Shell files using jscpd.
    cmds:
      - jscpd --config={{.CONFIG}} .
    vars:
      CONFIG: '{{.CONFIG_DIR}}/.jscpd.json'
    generates:
      - ./build/cpd/**/*

  jenkins:
    desc: Lint Jenkinsfiles
    summary: |
      This task lints Jenkinsfiles using npm-groovy-lint and jflint.
    cmds:
      - npm-groovy-lint --config={{.CONFIG_DIR}}/ --failon info --no-insight --files "**/Jenkinsfile"
      - cmd: jflint --config={{.CONFIG}} {{.JENKINSFILE}} >> /dev/null
        ignore_error: true
    vars:
      CONFIG: '{{.CONFIG_DIR}}/.jflintrc'
      JENKINSFILE: '{{.CLI_ARGS | default "Jenkinsfile"}}'
    sources:
      - ./**/Jenkinsfile

  # ---------
  default:
    desc: Run all linting tasks in parallel
    deps:
      - task: ws
      - task: docker
      - task: yaml
      - task: json
      - task: shell
      - task: md
      - task: spell
      - task: cp
      - task: jenkins
