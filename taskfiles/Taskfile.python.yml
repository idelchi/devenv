version: '3'

# requires
# - CONFIG_DIR

vars:
  # TODO: Unclear if this is actually passed correctly (try it)
  DIRECTORY: '{{.CLI_ARGS | default "."}}'

tasks:
  lint:
    desc: Lint Python code
    summary: |
      This task checks Python code using black, isort, prospector, pyright, and ruff.
    cmds:
      - black --check --config={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - isort --check --settings-file={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - ruff check --config={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - prospector --messages-only --profile={{.CONFIG_PROSPECTOR}} {{.DIRECTORY}}
      - pyright --project={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - mypy --config-file={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
    sources:
      - ./**/*.py
      - '{{.CONFIG_PYPROJECT}}'
      - '{{.CONFIG_PROSPECTOR}}'
    vars:
      CONFIG_PYPROJECT: '{{.CONFIG_DIR}}/pyproject.toml'
      CONFIG_PROSPECTOR: '{{.CONFIG_DIR}}/.prospector.yml'
    env:
      # Important for pyright as it won't find imports otherwise
      PYTHONPATH: '.'

  format:
    desc: Format Python code
    summary: |
      This task formats Python code using black, isort, and ruff.
    cmds:
      - black --quiet --config={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - isort --quiet --settings-file={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
      - ruff check --fix-only --config={{.CONFIG_PYPROJECT}} {{.DIRECTORY}}
    sources:
      - ./**/*.py
      - '{{.CONFIG_PYPROJECT}}'
    vars:
      CONFIG_PYPROJECT: '{{.CONFIG_DIR}}/pyproject.toml'
      CONFIG_PROSPECTOR: '{{.CONFIG_DIR}}/.prospector.yml'

  test:
    desc: Run pytest
    summary: |
      This task runs all tests with pytest.
    cmd: pytest {{.DIRECTORY}}

  cover:
    desc: Generate test coverage report
    summary: |
      This task generates a test coverage report (currently not implemented).
    cmd: echo "not implemented"

  clean:
    desc: Clean up temporary files
    summary: |
      This task cleans up temporary files created by python and pytest.
    cmd: rm -rf .pytest_cache **/.pytest_cache **/__pycache__ .mypy_cache .ruff_cache
    shopt: [globstar]

  publish:
    desc: Publish Python code
    cmds:
      - |
        output=$(pip index versions -i $PYPI_REPOSITORY_URL/simple {{.CLI_ARGS}} 2> /dev/null)
        # Extract the line of the output, which contains the available versions
        versions=$(echo "$output" | grep -oP '(?<=Available versions: ).*')
        echo "Found versions: $versions"
        # Convert the available versions into an array
        version_array=()
        for version in $(echo $versions | tr ',' ' '); do
            version_array+=("$version")
        done

        # Check if PYPI_VERSION is in the list of special cases
        if [[ "$PYPI_VERSION" =~ \.dev$ ]] || [[ "$PYPI_VERSION" =~ \+[a-zA-Z0-9_-]+$ ]]; then
            echo "PYPI_VERSION '$PYPI_VERSION' allows development overwrite."
            exit 0
        elif [[ " ${version_array[@]} " =~ " ${PYPI_VERSION} " ]]; then
            echo "PYPI_VERSION '$PYPI_VERSION' is already in the list of available versions."
            exit 1
        else
            echo "PYPI_VERSION '$PYPI_VERSION' doesn't exist, uploading."
        fi
      # Workaround for volume mounts having issues when copying from /tmp to /
      - defer: |
          pwd=$(pwd)
          rm -rf /tmp/imio && cd $pwd
      - |
        rm -rf /tmp/imio && cp -r . /tmp/imio && cd /tmp/imio
        poetry version $PYPI_VERSION
        poetry config repositories.remote $PYPI_REPOSITORY_URL
        poetry config http-basic.remote $PYPI_USERNAME $PYPI_PASSWORD
        poetry build
        poetry publish -r remote
    env:
      PYPI_REPOSITORY_URL: ''
      PYPI_USERNAME: ''
      PYPI_PASSWORD: ''
      PYPI_VERSION: ''

  update:
    desc: Update poetry lock file
    cmds:
      - rm -rf $HOME/.cache/pypoetry
      - rm -f poetry.lock
      - poetry lock

  metadata:
    desc: Generate metadata file
    cmds:
      - 'echo "author: $AUTHOR" > {{.ARGS}}'
      - 'echo "branch: $BRANCH_NAME" >> {{.ARGS}}'
      - 'echo "build: $BUILD_NUMBER" >> {{.ARGS}}'
      - 'echo "commit: $GIT_COMMIT" >> {{.ARGS}}'
      - 'echo "date: $(date)" >> {{.ARGS}}'
      - 'echo "version: $PYPI_VERSION" >> {{.ARGS}}'
    vars:
      ARGS: '{{.CLI_ARGS | default "metadata"}}'
    env:
      AUTHOR:
        sh: whoami
      BRANCH_NAME:
        sh: git rev-parse --abbrev-ref HEAD
      BUILD_NUMBER: 'unknown'
      PYPI_VERSION: 'unknown'
      GIT_COMMIT:
        sh: git rev-parse HEAD

  share: 'find {{.DIRECTORY}} -name "*.py" -exec echo "" \; -exec echo "***** FILE: {} *****" \; -exec cat {} \; > share.py'
