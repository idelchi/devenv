version: "3"

# requires
# - SCRIPTS_DIR
# - BUILD_DIR

vars:
  # Folders
  CONFIG_DIR: '{{.CONFIG_DIR | default "." }}'

  # Files
  LINT_REPORT: '{{.LINT_REPORT | default "lint-report"}}'
  COVER_REPORT: '{{.COVER_REPORT | default "coverage-report"}}'
  TEST_REPORT: '{{.TEST_REPORT | default "test-report"}}'

  # Settings
  COVERAGE: '{{.COVERAGE | default "100%"}}'

tasks:
  # Utilities
  # ---------
  init:
    run: once
    cmd: mkdir -p {{.BUILD_DIR}}
    status:
      - test -d {{.BUILD_DIR}}

  clean:
    - rm -rf {{.BUILD_DIR}}
    - rm -rf .cache
    - go clean -testcache

  mod:
    - go mod download
    - go mod tidy

  # Build
  # ---------
  build:
    desc: build go project
    cmd: go build {{.FLAGS}} {{.CLI_ARGS}} -o {{.BUILD_DIR}}/ {{.PACKAGES}}
    env:
      GOOS: "{{.GOOS}}"
    vars:
      PACKAGES: "./..."

  release:
    desc: build go project for Linux and Windows with debug information stripped
    cmds:
      - task: build
        vars:
          GOOS: windows
          CLI_ARGS: "{{.FLAGS}}"
      - task: build
        vars:
          GOOS: linux
          CLI_ARGS: "{{.FLAGS}}"
    vars:
      DEFAULT: "{{.GIT_BRANCH}} - {{.GIT_DESCRIPTION}} - unofficial & generated by {{.GIT_AUTHOR}}"
      SOURCE_BRANCH: "{{.SOURCE_BRANCH | default .DEFAULT}}"
      FLAGS: -ldflags='-s -w -X "main.version={{.SOURCE_BRANCH}}"' {{.CLI_ARGS}}
    env:
      CGO_ENABLED: "0"

  # Lint & Format
  # ---------
  format:
    desc: format go project
    cmds:
      - >
        golangci-lint fmt
        --config={{.GOLANGCI_LINT_CONFIG}}

      - >
        golangci-lint run
        --config={{.GOLANGCI_LINT_CONFIG}}
        --disable=godox
        --fix
        --issues-exit-code 0
        &> /dev/null
    vars:
      GOLANGCI_LINT_CONFIG: "{{.CONFIG_DIR}}/.golangci.yml"
    sources:
      - ./**/*.go
      - "{{.CONFIG_DIR}}/.golangci.yml"

  lint:
    desc: lint go project
    deps: [init]
    cmds:
      - >
        golangci-lint run
        --config={{.GOLANGCI_LINT_CONFIG}}
        --disable=godox
        --output.code-climate.path={{.LINT_REPORT}}
        --output.junit-xml.path={{.LINT_REPORT}}.xml
        --output.checkstyle.path={{.LINT_REPORT}}.checkstyle
        --output.text.path=stdout
        --output.text.colors=true
        {{.CLI_ARGS}}
    vars:
      GOLANGCI_LINT_CONFIG: "{{.CONFIG_DIR}}/.golangci.yml"
      LINT_REPORT: "{{.BUILD_DIR}}/{{.LINT_REPORT}}"
    sources:
      - ./**/*.go
      - "{{.CONFIG_DIR}}/.golangci.yml"

  # Quality
  # ---------
  test:
    desc: test go project
    deps: [init]
    cmd: go test {{.TEST_FLAGS}} {{.PACKAGES}} {{.CLI_ARGS}}
    env:
      RUN_MONKEY_PATCH_TESTS: "{{.RUN_MONKEY_PATCH_TESTS}}"
    vars:
      PACKAGES: "./..."

  race:
    - task: test
      vars:
        TEST_FLAGS: "-race"

  bench:
    - task: test
      vars:
        TEST_FLAGS: "-bench=."

  fuzz:
    summary: |
      Fuzzing should be run manually, ideally.
      Example:
        go test -fuzz=<regex> -fuzztime=<time> <package>
    preconditions:
      - sh: "exit 1"
        msg: "fuzzing should be run manually"

  cover:
    desc: test go project with code coverage enabled
    deps:
      - init
    cmds:
      - task: test
        vars:
          TEST_FLAGS: "-gcflags=-l -tags cover -covermode=set --coverprofile {{.COVER_REPORT}}.cov"
          RUN_MONKEY_PATCH_TESTS: "true"
      - go tool cover -html={{.COVER_REPORT}}.cov -o {{.COVER_REPORT}}.html
    vars:
      COVER_REPORT: "{{.BUILD_DIR}}/{{.COVER_REPORT}}"

  genprofile:
    desc: generate profiles for go project
    deps: [init]
    cmd: "{{.SCRIPTS_DIR}}/profilegen.sh {{.BENCH}} -d {{.BUILD_DIR}} -p {{.PROJECT}} {{.PACKAGES}}"
    vars:
      BENCH: '{{if eq .BENCH "true"}}-b{{else}}{{end}}'
      PROJECT:
        sh: go list -m
      PACKAGES:
        sh: echo $(go list ./...)

  profile:
    desc: view profiles for go project
    deps: [genprofile]
    cmd: "{{.SCRIPTS_DIR}}/profileview.sh -f {{.FRACTION}} -i {{.IP}} -b {{.BUILD_DIR}} -p {{.PROJECT}} {{.PACKAGES}}"
    vars:
      FRACTION: '{{.FRACTION | default "0.0"}}'
      IP: '{{if eq OS "windows"}}localhost{{else}}0.0.0.0{{end}}'
      PROJECT:
        sh: go list -m
      PACKAGES:
        sh: echo $(go list ./...)

  coverlines:
    deps: [cover]
    cmd: |
      lines=$(uncover {{.COVER_REPORT}}.cov)

      if [ -z "$lines" ]; then
        echo "no uncovered lines"
        exit 0
      fi

      count=0
      ignore_tag="//cover:ignore"
      while read -r line; do
        if [[ $line =~ ^[[:space:]] ]]; then
          if [[ $line != *"$ignore_tag"* ]]; then
            ((count++))
          fi
        fi
      done <<< "$lines"

      if [ $count -gt 0 ]; then
        echo "uncovered lines: $count"
        exit 1
      fi
    vars:
      COVER_REPORT: "{{.BUILD_DIR}}/{{.COVER_REPORT}}"

  cover-prereq:
    # TODO(Idelchi): Either deprecate or properly set up this task. It should orientate around package names and not folder names.
    cmd: |
      for package in {{.PACKAGES}}; do
        prefix={{.PROJECT}}
        pkg=${package#$prefix}

        #skipping root package
        if [ -z "$pkg" ]; then
          continue
        fi

        #skip main packages
        #TODO: The printf syntax is not so portable - it's necessary
        # due to task expanding the variable otherwise.
        name=$(go list -f {{printf "{{.Name}}"}} "$package")
        if [ "$name" == "main" ]; then
          continue
        fi

        file="./$pkg/*_test.go"
        if ! ls $file 1> /dev/null 2>&1; then
          echo "$package is missing a _test.go file, creating it!"
          if [ -z "$pkg" ]; then
            basename=$(basename $prefix)
          else
            basename=$(basename $pkg)
          fi
          test_file=./$pkg/${basename}_test.go
          echo "package ${basename}_test" >> $test_file
        fi
      done
    vars:
      PROJECT:
        sh: go list -m
      PACKAGES:
        sh: echo $(go list ./...)

  coverage:
    desc: calculate coverage value
    deps: [cover]
    cmd: |
      want={{.COVERAGE}}
      coverage=$(go tool cover -func {{.COVER_REPORT}}.cov | grep total | awk '{print $3}')
      echo "Coverage is ${coverage}"
      got=${coverage%\%}; got=${got%.*}
      want=${want%\%}; want=${want%.*}
      echo "coverage: $got" > {{.BUILD_DIR}}/coverage-results
      if (( got < want )); then
        echo "Coverage (floored) ${got}% lower than expected ${want}%"
        exit 1
      fi
      echo "Coverage (floored) ${got}% passes expected ${want}%"
    vars:
      COVER_REPORT: "{{.BUILD_DIR}}/{{.COVER_REPORT}}"

  testsum:
    cmd: gotestsum --junitfile {{.TEST_REPORT}}.xml --format testname --packages {{.PACKAGES}}
    vars:
      TEST_REPORT: "{{.BUILD_DIR}}/{{.TEST_REPORT}}"
      PACKAGES: "./..."
    preconditions:
      - sh: test $(which gotestsum)
        msg: "gotestsum is missing"

  quality:
    desc: run all quality relevant tasks
    platforms: [linux]
    deps:
      - task: race
      - task: cover
      - task: testsum
    cmds:
      - |
        gocover-cobertura < {{.COVER_REPORT}}.cov > {{.COVER_REPORT}}.xml
        sed -i 's;filename="{{.PROJECT}}/;filename=";g' {{.COVER_REPORT}}.xml || exit 0
      - task: coverage
    vars:
      TEST_REPORT: "{{.BUILD_DIR}}/{{.TEST_REPORT}}"
      COVER_REPORT: "{{.BUILD_DIR}}/{{.COVER_REPORT}}"
      PROJECT:
        sh: go list -m
      PACKAGES: "./..."
    preconditions:
      - sh: test $(which gocover-cobertura)
        msg: "gocover-cobertura is missing"

  # Documentation
  # ---------
  doc:
    desc: run godoc on go project
    cmds:
      - echo "publishing on :8888"
      - godoc -notes 'BUG|TODO' -http=:8888 &
      - sleep 2
      - echo "press [enter] to quit" && read -r

    preconditions:
      - sh: test $(which godoc)
        msg: "godoc is missing"

  graph:
    desc: output graph file showing dependencies
    deps: [init]
    cmd: goda graph -short ./... | dot -T jpg -o {{.BUILD_DIR}}/dependencies.jpg
