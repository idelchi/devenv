version: "3"

tasks:
  tag:
    cmds:
      - |
        # if TAG=="auto", then use the next tag
        if [ "{{.TAG}}" == "auto" ]; then
          TAG=$(gh release list -L 1 --exclude-pre-releases --json tagName -q '.[0].tagName')
          TAG=$(go-next-tag --bump=patch ${TAG})
        else
          TAG="{{.TAG}}"
        fi
        echo "Tagging as ${TAG}"
        gh release delete ${TAG} --yes --cleanup-tag || true
        git tag -d ${TAG} || true
        git tag ${TAG}
        git push origin -f ${TAG}
    vars:
      TAG: '{{.CLI_ARGS | default "v0.0.0"}}'

  auto:
    cmds:
      - task: tag
        vars:
          TAG: auto

  delete:
    cmds:
      - cmd: |
          # Delete prerelease GitHub releases (and cleanup their tags)
          gh release list --json tagName,isPrerelease -q '.[] | select(.isPrerelease==true) | .tagName' |
          while IFS= read -r tag; do
            [ -n "$tag" ] && gh release delete "$tag" --yes --cleanup-tag || true
          done
        ignore_error: true
      - cmd: |
          # Delete all local tags, refetch, then delete remote *-beta tags
          git tag -l | while IFS= read -r t; do
            [ -n "$t" ] && git tag -d "$t" || true
          done
          git fetch --tags || true
          git tag -l '*-beta' | while IFS= read -r t; do
            [ -n "$t" ] && git push --delete origin "$t" || true
          done
        ignore_error: true
      - cmd: |
          # Delete completed workflow runs
            gh run list --limit 500 --status completed --json databaseId -q '.[].databaseId' |
            while IFS= read -r id; do
              [ -n "$id" ] && gh run delete "$id" || true
            done
        ignore_error: true
